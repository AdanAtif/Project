generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model adminuser {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String? @unique
  password String?
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  hashpassword  String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  rating        rating[]
  cart          cart[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model products {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  price    Int
  stock    Int
  Color    String
  Size     String
  Category String
  image    String
  rating   rating[]
  cart     cart[]
}

model rating {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  rating String
  review String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productsId String   @db.ObjectId
  products   products @relation(fields: [productsId], references: [id], onDelete: Cascade)
}

model cart {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  quantity   Int
  price      Int
  image      String
  productsId String   @db.ObjectId
  products   products @relation(fields: [productsId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
